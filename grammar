%token VARIABLE END LAM REPL_ESCAPE
%start input

%{
    #include <stdio.h>
    #include <string>
    #include <iostream>
    #include "common.h"
    #include "ast.hpp"
    #include "repl.hpp"
    
    ASTNode* root;
    bool REPLrunning = true;
    
    extern "C"
    {
        int yyparse(void);
        int yylex(void);  
        void yyerror(char *);
        int yywrap() {
            return 1;
        }
    }
%}

%%

input:
     term                       { root = (ASTNode*) $1; YYACCEPT; }
     | REPL_ESCAPE var          { Variable* v = (Variable*) $2;
                                  std::string cmd = std::string(v->name);
                                  delete v;
                                  REPLCmd(cmd);
                                  YYACCEPT;};

term:
     var                        { $$ = $1; }
     | '(' LAM var '.' term ')' { $$ = (void*)(new Abstraction((Variable*)$3,
                                                               (ASTNode*) $5));}
     | '(' term term ')'        { $$ = (void*)(new Application((ASTNode*)$2,
                                                               (ASTNode*)$3));};

var:
     VARIABLE                   { $$ = (void*) new Variable((char*) $1); };

%%

void yyerror(char *s) {
    fprintf(stderr, "\n%s\n", s);
}

int main(void) {
    std::cout << "Welcome, enter :quit to exit.\n";
    while (REPLrunning) {
        std::cout << "λ> ";
        yyparse();
        
        if (root) {
            setNodesAOPPTTNIfApplicable(root, &root);
            root->setParentPointers();
            root->alphaReduce();
            root->betaReduce();
            std::cout << "β-reduction:\t" << root->toString() << std::endl;
            delete root;
            root = 0;
        }
    }
    return 0;
}
